name: Migrate Repository-Level Branch Protection Rules and Code Scanning Alerts/Analyses

on:
  issues:
    types: [opened, edited]

jobs:
  migrate:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v3

    # Step 2: Validate Personal Access Tokens (PAT)
    - name: Validate PAT Tokens
      shell: pwsh
      env:
        SOURCE_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        TARGET_TOKEN: ${{ secrets.TARGET_TOKEN }}
      run: |
        if (-not $env:SOURCE_TOKEN) {
          Write-Error "Source Token is missing!"
          exit 1
        }
        if (-not $env:TARGET_TOKEN) {
          Write-Error "Target Token is missing!"
          exit 1
        }

    # Step 3: Extract Repository Details from Issue Body
    - name: Extract Issue Body Details
      id: extract_issue
      uses: actions/github-script@v6
      with:
        script: |
          const issueBody = context.payload.issue.body || '';
          console.log("Issue Body: ", issueBody);

          const sourceOrgMatch = issueBody.match(/### Source Organization\s*\n*(.*)/);
          const sourceRepoMatch = issueBody.match(/### Source Repository\s*\n*(.*)/);
          const targetOrgMatch = issueBody.match(/### Target Organization\s*\n*(.*)/);
          const targetRepoMatch = issueBody.match(/### Target Repository\s*\n*(.*)/);

          const sourceOrg = sourceOrgMatch ? sourceOrgMatch[1].trim() : null;
          const sourceRepo = sourceRepoMatch ? sourceRepoMatch[1].trim() : null;
          const targetOrg = targetOrgMatch ? targetOrgMatch[1].trim() : null;
          const targetRepo = targetRepoMatch ? targetRepoMatch[1].trim() : null;

          if (!sourceOrg || !sourceRepo || !targetOrg || !targetRepo) {
            throw new Error('Required details missing in issue body.');
          }

          core.setOutput("source_org", sourceOrg);
          core.setOutput("source_repo", sourceRepo);
          core.setOutput("target_org", targetOrg);
          core.setOutput("target_repo", targetRepo);

    # Step 4: Print Variables for Debugging
    - name: Print Parsed Variables
      run: |
        echo "Source Organization: ${{ steps.extract_issue.outputs.source_org }}"
        echo "Source Repository: ${{ steps.extract_issue.outputs.source_repo }}"
        echo "Target Organization: ${{ steps.extract_issue.outputs.target_org }}"
        echo "Target Repository: ${{ steps.extract_issue.outputs.target_repo }}"

    # Step 5: Check GitHub CLI Installation
    - name: Check GitHub CLI Version
      run: gh --version

    # Step 6: Run Migration Script
    - name: Run Migration Script
      shell: pwsh
      env:
        SOURCE_ORG: "${{ steps.extract_issue.outputs.source_org }}"
        SOURCE_REPO: "${{ steps.extract_issue.outputs.source_repo }}"
        TARGET_ORG: "${{ steps.extract_issue.outputs.target_org }}"
        TARGET_REPO: "${{ steps.extract_issue.outputs.target_repo }}"
        SOURCE_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        TARGET_TOKEN: ${{ secrets.TARGET_TOKEN }}
        GH_TOKEN: ${{ secrets.SOURCE_TOKEN }} # Ensures authentication for GitHub CLI
      run: |
        # Define variables
        $SourceOrg = "${{ env.SOURCE_ORG }}"
        $SourceRepo = "${{ env.SOURCE_REPO }}"
        $TargetOrg = "${{ env.TARGET_ORG }}"
        $TargetRepo = "${{ env.TARGET_REPO }}"
        $SourceToken = "${{ env.SOURCE_TOKEN }}"
        $TargetToken = "${{ env.TARGET_TOKEN }}"
        $SarifDirectory = "$PWD/sarif"
        $BranchRef = "refs/heads/main"

        # Create SARIF directory if it doesn't exist
        if (!(Test-Path -Path $SarifDirectory)) {
            New-Item -ItemType Directory -Path $SarifDirectory
        }

        # Fetch Latest Commit SHA
        Write-Output "Fetching latest commit SHA from target repository..."
        $latestCommitUrl = "https://api.github.com/repos/$TargetOrg/$TargetRepo/commits/$BranchRef"
        $latestCommit = & gh api -X GET $latestCommitUrl -H "Authorization: token $TargetToken" | ConvertFrom-Json

        if ($latestCommit.sha) {
            $latestCommitSha = $latestCommit.sha
            Write-Output "Using commit SHA: $latestCommitSha for SARIF uploads."
        } else {
            Write-Error "Failed to fetch the latest commit SHA."
            exit 1
        }

        # Fetch and Convert Alerts to SARIF
        Write-Output "Fetching alerts from source repository..."
        $alertsUrl = "https://api.github.com/repos/$SourceOrg/$SourceRepo/code-scanning/alerts"
        $alertsList = & gh api -X GET $alertsUrl -H "Authorization: token $SourceToken" | ConvertFrom-Json

        if ($alertsList) {
            Write-Output "Converting alerts to SARIF format..."
            $sarifDataAlerts = @{
                version = "2.1.0"
                '$schema' = "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json"
                runs = @()
            }

            $sarifRunAlerts = @{
                tool = @{
                    driver = @{
                        name = "CodeQL"
                        version = "2.19.3"
                        informationUri = "https://github.com/github/codeql"
                        rules = @()
                    }
                }
                results = @()
            }

            foreach ($alert in $alertsList) {
                $ruleId = $alert.rule.id

                if (-not ($sarifRunAlerts.tool.driver.rules | Where-Object { $_.id -eq $ruleId })) {
                    $sarifRunAlerts.tool.driver.rules += @{
                        id = $ruleId
                        name = $alert.rule.name
                        fullDescription = @{ text = $alert.rule.full_description }
                        helpUri = "https://github.com/github/codeql"
                        properties = @{
                            tags = $alert.rule.tags
                            severity = $alert.rule.severity
                        }
                    }
                }

                $sarifRunAlerts.results += @{
                    ruleId = $ruleId
                    message = @{ text = $alert.most_recent_instance.message.text }
                    locations = @(
                        @{
                            physicalLocation = @{
                                artifactLocation = @{ uri = $alert.most_recent_instance.location.path }
                                region = @{
                                    startLine = $alert.most_recent_instance.location.start_line
                                    endLine = $alert.most_recent_instance.location.end_line
                                    startColumn = $alert.most_recent_instance.location.start_column
                                    endColumn = $alert.most_recent_instance.location.end_column
                                }
                            }
                        }
                    )
                    properties = @{
                        state = $alert.state
                        severity = $alert.rule.severity
                        fixedAt = $alert.fixed_at
                    }
                }
            }

            $sarifDataAlerts.runs += $sarifRunAlerts
            $sarifFileAlerts = "$SarifDirectory\alerts.sarif"
            $sarifDataAlerts | ConvertTo-Json -Depth 10 | Set-Content -Path $sarifFileAlerts -Force
            Write-Output "SARIF file for alerts created at $sarifFileAlerts."
        }

        # Migrate Analyses
        Write-Output "Fetching analyses from source repository..."
        $analysesUrl = "https://api.github.com/repos/$SourceOrg/$SourceRepo/code-scanning/analyses"
        $analysesList = & gh api -X GET $analysesUrl -H "Authorization: token $SourceToken" | ConvertFrom-Json

        foreach ($analysis in $analysesList) {
            $analysisId = $analysis.id
            $sarifFileAnalysis = "$SarifDirectory\analysis_$analysisId.sarif"
            Write-Output "Processing analysis ID: $analysisId"

            $analysisDetailsUrl = "https://api.github.com/repos/$SourceOrg/$SourceRepo/code-scanning/analyses/$analysisId"
            $analysisData = & gh api -X GET $analysisDetailsUrl -H "Authorization: token $SourceToken" | ConvertFrom-Json

            if (-not $analysisData.results_count -or $analysisData.results_count -eq 0) {
                Write-Output "Skipping analysis $analysisId as it has no results."
                continue
            }

            $sarifDataAnalysis = @{
                version = "2.1.0"
                '$schema' = "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json"
                runs = @()
            }

            $sarifRunAnalysis = @{
                tool = @{
                    driver = @{
                        name = $analysisData.tool.name
                        version = $analysisData.tool.version
                        informationUri = "https://github.com/github/codeql"
                    }
                }
                results = @()
            }

            foreach ($result in $analysisData.results) {
                $sarifRunAnalysis.results += @{
                    ruleId = $result.ruleId
                    message = @{ text = $result.message.text }
                    locations = @(
                        @{
                            physicalLocation = @{
                                artifactLocation = @{ uri = $result.location.path }
                                region = @{
                                    startLine = $result.location.startLine
                                    endLine = $result.location.endLine
                                    startColumn = $result.location.startColumn
                                    endColumn = $result.location.endColumn
                                }
                            }
                        }
                    )
                }
            }

            $sarifDataAnalysis.runs += $sarifRunAnalysis
            $sarifDataAnalysis | ConvertTo-Json -Depth 10 | Set-Content -Path $sarifFileAnalysis -Force
            Write-Output "SARIF file for analysis $analysisId created at $sarifFileAnalysis."
        }

        Write-Output "Migration process completed."
